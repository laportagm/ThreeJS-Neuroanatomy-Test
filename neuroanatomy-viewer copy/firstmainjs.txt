import * as THREE from 'three';
import { GLTFLoader } from '../node_modules/three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from '../node_modules/three/examples/jsm/controls/OrbitControls.js';

let scene, camera, renderer;
let controls;
let raycaster, mouse;
let selectedObject = null;
let originalMaterial = null;
let tooltip = null;
let targetPosition = new THREE.Vector3();

init();
animate();

function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x1D1F21); // space gray

    camera = new THREE.PerspectiveCamera(65, window.innerWidth / window.innerHeight, 0.6, 10000);
    camera.position.set(0, -20, 35); // Adjusted initial camera position

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    controls = new OrbitControls(camera, renderer.domElement);

    // Basic settings
    controls.enableDamping = true;
    controls.dampingFactor = 0.04;
    controls.screenSpacePanning = true; // Allow panning using screen space (more intuitive)
    
    // Distance controls
    controls.minDistance = 10;
    controls.maxDistance = 200;
    controls.maxPolarAngle = Math.PI / 2; 
    
    // Rotation speed settings
    controls.rotateSpeed = 0.7;
    
    // Zoom speed settings
    controls.zoomSpeed = 1.2;
    
    // Panning speed settings
    controls.panSpeed = 0.8;
    
    // Polar angles (vertical rotation)
    // controls.minPolarAngle = Math.PI / 6; // Prevent camera from moving below the "ground"
    // controls.maxPolarAngle = 5 * Math.PI / 6; // Prevent camera from going too high
    
    // Mouse buttons configuration for desired behavior
    controls.mouseButtons = {
        LEFT: THREE.MOUSE.PAN,        // Left button for panning
        MIDDLE: THREE.MOUSE.DOLLY,   // Middle button for zooming
        RIGHT: THREE.MOUSE.ROTATE    // Right button for rotating (changing perspective)
    };

    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();

    window.addEventListener('resize', onWindowResize, false);
    renderer.domElement.addEventListener('click', onClick, false);
    renderer.domElement.addEventListener('dblclick', onDoubleClick, false);

    // Add Ambient Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // soft white light
    scene.add(ambientLight);

    // Add Directional Light
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(1, 1, 1).normalize();
    scene.add(directionalLight);

    // Initialize tooltip
    tooltip = document.createElement('div');
    tooltip.style.position = 'absolute';
    tooltip.style.padding = '4px 8px';
    tooltip.style.background = 'rgba(0, 0, 0, 0.6)';
    tooltip.style.color = 'white';
    tooltip.style.borderRadius = '4px';
    tooltip.style.display = 'none';
    tooltip.style.pointerEvents = 'none';
    document.body.appendChild(tooltip);

    renderer.domElement.addEventListener('mousemove', onMouseMove, false);

    // Add event listeners for the interactive legend
    const legendItems = document.querySelectorAll('#legend li');
    legendItems.forEach(item => {
        item.addEventListener('click', (event) => {
            const modelName = event.target.getAttribute('data-model-name');
            highlightModelByName(modelName);
        });
    });

    loadGLBModels();
}

function animate() {
    requestAnimationFrame(animate);

    controls.update();

    // Smoothly move the camera towards the target position
    camera.position.lerp(targetPosition, 0.01);

    renderer.render(scene, camera);
}

function loadGLBModels() {
    const loader = new GLTFLoader();

    // Load caudal-medulla.glb
    loader.load('/models/caudal-medulla.glb', (gltf) => {
        scene.add(gltf.scene);
    });

    // Load rostrum-medulla.glb
    loader.load('/models/rostral-medulla.glb', (gltf) => {
        scene.add(gltf.scene);
    });

    // Load midbrain.glb
    loader.load('/models/midbrain.glb', (gltf) => {
        scene.add(gltf.scene);
    });

    // Load pons.glb
    loader.load('/models/pons.glb', (gltf) => {
        scene.add(gltf.scene);
    });
}

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

function onClick(event) {
    event.preventDefault();

    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);

    const intersects = raycaster.intersectObjects(scene.children, true);

    if (intersects.length > 0) {
        if (selectedObject && originalMaterial) {
            selectedObject.material = originalMaterial;
        }
        selectedObject = intersects[0].object;
        originalMaterial = selectedObject.material;
        selectedObject.material = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });
    } else if (selectedObject && originalMaterial) {
        selectedObject.material = originalMaterial;
        selectedObject = null;
    }
}

function onDoubleClick(event) {
    event.preventDefault();

    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);

    const intersects = raycaster.intersectObjects(scene.children, true);

    if (intersects.length > 0) {
        intersects[0].object.visible = !intersects[0].object.visible;
    }
}

function onMouseMove(event) {
    event.preventDefault();

    let intersects = getIntersects(event.layerX, event.layerY);
    if (intersects.length > 0) {
        const obj = intersects[0].object;
        if (obj.name) {
            tooltip.textContent = obj.name;
            tooltip.style.display = 'block';
            tooltip.style.left = `${event.clientX + 10}px`;
            tooltip.style.top = `${event.clientY + 10}px`;
        }
    } else {
        tooltip.style.display = 'none';
    }
}

function getIntersects(x, y) {
    x = (x / window.innerWidth) * 2 - 1;
    y = -(y / window.innerHeight) * 2 + 1;
    mouse.set(x, y);
    raycaster.setFromCamera(mouse, camera);
    return raycaster.intersectObject(scene, true);
}

function highlightModelByName(modelName) {
    const model = scene.getObjectByName(modelName);
    if (model) {
        if (selectedObject && originalMaterial) {
            selectedObject.material = originalMaterial;
        }

        selectedObject = model;
        originalMaterial = selectedObject.material;
        selectedObject.material = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });

        targetPosition.set(0, 0, 0);
        targetPosition.add(model.position);
        targetPosition.z += 3;

        updateInfoPanel(modelName);
    }
}

function updateInfoPanel(modelName) {
    const infoPanel = document.getElementById('info-panel');
    const infoTitle = document.getElementById('info-title');
    const infoDescription = document.getElementById('info-description');

    const modelInfo = {
        'caudal-medulla': {
            title: 'Caudal Medulla',
            description: 'The caudal medulla is the lower half of the medulla oblongata. Sample information here.'
        },
        'rostrum-medulla': {
            title: 'Rostrum Medulla',
            description: 'The rostrum medulla is the upper half of the medulla oblongata. Sample information here.'
        },
        'midbrain': {
            title: 'Midbrain',
            description: 'The midbrain is part of the brainstem. It plays an important role in motor movement. Sample information here.'
        },
        'pons': {
            title: 'Pons',
            description: 'The pons is part of the brainstem, and it links the medulla oblongata and the thalamus. Sample information here.'
        }
    };

    if (modelInfo[modelName]) {
        infoTitle.textContent = modelInfo[modelName].title;
        infoDescription.textContent = modelInfo[modelName].description;
        infoPanel.style.display = 'block';
    } else {
        infoPanel.style.display = 'none';
    }
}
